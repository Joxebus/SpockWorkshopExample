package com.nearsoft.test

import com.nearsoft.BadWords
import com.nearsoft.beans.Feed
import com.nearsoft.beans.FeedEntry
import com.nearsoft.categories.ExtractUrlFromText
import spock.lang.Specification
import spock.lang.Unroll

/**
 * Here you will have some test examples of different kind.
 */
class MiscellaneousSpec extends Specification {

    def "Test old value with lists"(){
        setup:
        def list = [1,2,3]
        when:
        list.add(4)
        then:
        3 == old(list.size())
        4 == list.size()
    }

    @Unroll("Running test with title '#titleT' and link '#linkT'")
    def "Feed canonical doesn't includes link and description on toString()"(){
        setup:
        FeedEntry entry = new FeedEntry()
        entry.with {
            title = titleT
            author = authorT
            link = linkT
            description = descriptionT
            pubDate = pubDateT

        }

        println entry

        expect:
        !entry.toString().contains('link')
        !entry.toString().contains('Description')
        entry.toString().contains(titleT)
        entry.toString().contains(authorT)
        entry.toString().contains(pubDateT)

        where: "Feed values"
        titleT     | authorT    | linkT             | descriptionT      | pubDateT
        'Title 1'  | 'Author 1' | 'http://link1.com'| 'Description 1'   | new Date().toString()
        'Title 2'  | 'Author 2' | 'http://link2.com'| 'Description 2'   | new Date().toString()
        //'Title 5'  | null | 'http://link4.com'| 'Description 4'   | 'abcdef'
        'Title 3'  | 'Author 3' | 'http://link3.com'| 'Description 3'   | new Date().toString()
        'Title 4'  | 'Author 4' | 'http://link4.com'| 'Description 4'   | new Date().toString()
    }

    def "Test constructor of Feed generated by @Canonical"(){
        when:
        Feed feed1 = new Feed(titleT)
        Feed feed2 = new Feed(null, authorT)
        Feed feed3 = new Feed(null, null, linkT)
        Feed feed4 = new Feed(null, null, null, descriptionT)
        Feed feed5 = new Feed(null, null, null, null, pubDateT)

        then: "Testing with different ways to acccess properties."
        feed1.getTitle()        == titleT
        feed2.author            == authorT
        feed3.'link'            == linkT
        feed4['description']    == descriptionT
        feed5.pubDate.equals(pubDateT)

        where:
        titleT     | authorT    | linkT             | descriptionT      | pubDateT
        'Title 1'  | 'Author 1' | 'http://link1.com'| 'Description 1'   | new Date().toString()
        'Title 2'  | 'Author 2' | 'http://link2.com'| 'Description 2'   | new Date().toString()
        'Title 3'  | 'Author 3' | 'http://link3.com'| 'Description 3'   | new Date().toString()
        'Title 4'  | 'Author 4' | 'http://link4.com'| 'Description 4'   | new Date().toString()
    }


    def "Test ExtractUrlFromText category."(){
        setup:
        String someText = "This text is an example, go to http://github.com/Joxebus for more examples and don't forget to visit http://nearsoft.com and http://www.google.com"

        when:
        List urls = []
        use(ExtractUrlFromText){
            urls = someText.getUrlsFromText()
        }
        println urls

        then:
        urls.size() == 3
        urls.contains('http://github.com/Joxebus')
        urls.contains('http://nearsoft.com')
        urls.contains('http://www.google.com')
    }

    @Unroll("Calling closure with value #value")
    def "Test closure call"(){
        when:
        def newValue = value.replace('e', 'a')

        then:
        myClosure.call(newValue)

        where:
        value               |   myClosure
        "test"              |   { it.contains('a') }
        "tasta"             |   { it.toUpperCase().equals('TASTA') }
        "another example"   |   { it.size() == 15 }
    }

    def "Test if a word is a bad word"(){
        expect:
        BadWords.censureWord(word) == expected

        where:
        word            | expected
        "hola"          | "####"
        "estacionar"    | "estacionar"
        "plasmar"       | "#######"
        "HOME"          | "####"
        "registro"      | "registro"
        "PALADAR"       | "#######"
    }



}
